elasticsearch介绍

	配置
		安装elasticsearch 默认端口9200，运行后可在终端交互，如curl 'http://localhost:9200/?pretty'

		安装kibana，默认端口5601，在浏览器打开.高版本kibana没有sense，变为内建的dev tools
	存储
		逻辑存储：索引_index，类别_type，文档_id
			文档存放位置，文档表示对象类别，文档唯一标识
		物理存储：集群，节点，分片
			分片有主分片和副本分片，一个主分片最多存储128个文档，所以主分片的数目决定了索引最大数据保存量。副本分片是主分片的拷贝。在索引建立的时候就已经确定了主分片数，但是副本分片数可以随时修改。
			副本与主分片不会在同一节点上，使得当集群中一个节点出现问题时不会丢失数据。
			水平扩容：索引建立之后主分片的个数无法改变，节点的增加使每个节点上的分片数更少，每个分片能有更多的硬件资源，从而提升分片的性能。增加副本数可以提高数据冗余量。
	搜索
		映射：描述数据在每个字段内如何存储
			文档中的不同字段分为代表精确值和代表全文的字段
			精确值字段查询结果为匹配或不匹配，而全文类型的域需要分析和建立倒排索引
			倒排索引
				倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。
			分析
				分析器分为字符过滤器、分词器和Token过滤器三个功能。
				首先，字符串按顺序通过每个 字符过滤器 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉HTML，或者将 & 转化成 and。
				其次，字符串被 分词器 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。
				最后，词条按顺序通过每个 token 
				过滤器。这个过程可能会改变词条（例如，小写化 Quick ），删除词条（例如， 像 a， and， the 等无用词），或者增加词条（例如，像 jump 和 leap 这种同义词）。
				内置分析器：标准分析器，简单分析器，空格分析器，语言分析器
			映射域
				类型：boolean long double date string
				查看映射：GET /_index/_type/_mapping
				string类型默认包含全文，其最重要两个属性是index和analyzer。index默认是analyzed，设置为not_analyzed不会对它分析。analyzer默认为标准分析器
			索引管理
				索引设置settings 主分片数shards 副本数duplicates 分析器

				elasticsearch类型是以Lucene 处理文档的这个方式为基础来实现的，而Lucene没有文档类型的概念，类型名被存储在_type字段上，通过过滤器限制返回指定类型的文档。Lucene会把索引中所有类型的字段映射到一起，所以不能有重名的不同类型字段。
				映射的最高一层称为根对象，包含各种元数据字段（_type,_id,_source），设置项，properties节点，其他设置等
				动态映射 ：是否自动索引新添加的字段
				动态更新索引 新文档被收集到内存索引缓存，然后提交追加倒排索引到新的段，清空缓存等待接受新的文档
				近实时搜索 refresh频率 持久化变更：事务日志，刷新清空缓存但不清空日志，提交时日志清空
				段合并 由于自动刷新每秒会建立新的段，导致段数暴增，而段数太多会消耗大量文件句柄、内存等资源，es后台通过段合并将小段合并为大段

		查询
			查询类型
				match_all 匹配所有文档
				match 全文查询时分析字符串，精确查询时精确匹配给定的值
				multi_match 在多个字段上执行相同的查询
				range 查询落在指定区间中的数字或时间
				term 精确值匹配，输入文本不做分析
				terms 允许多个值对同一字段进行匹配，字段包含其中一个值则满足条件
				exists&missing 查询某字段是否为空的文档
			布尔查询
				must 文档必须匹配条件，增加评分
				must_not 文档必须不匹配条件，增加评分
				should 如果满足任意条件增加评分，否则无影响
				filter 必须匹配，但评分不变
			constant_score 避免在只有filter时返回评分为0
			排序
				sort参数 按给定字段顺序排序
				字符串的排序 当需要对字符串排序时，我们不希望字符串被解析，此时新加一个字段raw设置index为not_analyzed，这样可以用原字段来搜而raw来排序
				相关性评分 explain查看标准：检索词频率，反向文档频率，字段长度准则
			分布式搜索
				客户端发送search请求到一个节点，这个节点作为协调节点。
				协调节点将请求转发到索引的每个主分片或副本分片上，每个分片在本地执行查询并添加结果到大小为 from + size 的本地有序优先队列中。
				每个分片把结果返回给协调节点，协调节点全局排序后返回结果列表。

				取回 协调节点确定需要取回的文档并发送multi-get request给对应的每个分片
				搜索选项 偏好，超时，路由，搜索类型
				游标查询 查询排序后保存索引一段时间，再分批拉取结果。每次拉取会刷新游标过期时间。
	深入搜索
		结构化搜索，非评分查询
			精确值查找term 查询文本时需保证被查询域为not_analyzed
			非评分查询会创建bitset，并缓存该过滤器在之后复用
			null视为字段缺失，可通过exists和missing查询
		全文搜索
			匹配查询 多词查询相当于分词后多个term查询，可通过operator和最小匹配百分比控制匹配词之间的关系，相当于多个布尔查询中的最小匹配个数，通过boost调整查询项的权重值
			相关度计算时IDF本应为某个词在所有文档中出现的百分数，但在实际操作中为词在它的分片中出现的百分数，所以当数据较少时偏差很大。解决方法一种是只有一个分片，另一种是在请求后加分布式频率搜索请求。
			分析器的设置
				索引时，先查找字段映射定义的分析器，没有则索引设置的分析器，否则为默认的标准分析器
				搜索时，先查询自己定义的分析器，然后与索引相同。
		多字段搜索
			单字符串查询 multi_match为每一个字段生成match查询并组合结果，可以对应最佳字段、多数字段、跨字段三种情况
				最佳字段 
					简单的布尔查询中或运算将各个字段评分结果加在一起，使得难以找到最佳匹配文档字段。使用dis_max分离最大化查询，将最佳匹配的评分作为查询的评分结果返回。tie_breaker参数对结果调优，将其他匹配语句评分按比例算入。
				多数字段
					语言分析器会去除词语的时态等属性，而提高全文相关性精度的常用方式就是为同一文本建立多种方式的索引。多字段映射使用词干模式和非词干模式对字段索引，采用multifields并设置权重。
				跨字段查询
					自定义_all字段
					cross--fields跨字段查询 词中心式查询
	近似匹配
		短语匹配 match_phrase 字符串中词项位置与顺序关系相同
		部分匹配 
			match_phrase_prefix 输入即搜索 前缀搜索资源消耗严重

	聚合
		

